// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/dev.db"
}

model User {
  id                     Int                  @id @default(autoincrement())
  email                  String               @unique
  password               String
  username               String               @unique
  name                   String?
  surname                String?
  isConfirmed            Boolean              @default(false)
  sentRequests           FriendshipRequest[]  @relation("Sender")
  receivedRequests       FriendshipRequest[]  @relation("Receiver")
  friendshipsInitiated   Friendship[]         @relation("Initiator")
  friendshipsReceived    Friendship[]         @relation("Receiver")
  debtsAsDebtor          Debt[]               @relation("Debtor")
  debtsAsCreditor        Debt[]               @relation("Creditor")
  debtRequestsAsDebtor   DebtRequest[]        @relation("Debtor")
  debtRequestsAsCreditor DebtRequest[]        @relation("Creditor")
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  DebtPaymentRequest     DebtPaymentRequest[] @relation("Debtor")
}

model Friendship {
  id     Int @id @default(autoincrement())
  userId Int
  friend Int

  initiator User     @relation("Initiator", fields: [userId], references: [id])
  receiver  User     @relation("Receiver", fields: [friend], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendshipRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("PENDING")
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Debt {
  id                 Int                  @id @default(autoincrement())
  amount             Float
  title              String
  description        String
  currency           String
  debtorId           Int
  creditorId         Int
  isPaidInFull       Boolean              @default(false)
  debtor             User                 @relation("Debtor", fields: [debtorId], references: [id])
  creditor           User                 @relation("Creditor", fields: [creditorId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  DebtPaymentRequest DebtPaymentRequest[]
}

model DebtRequest {
  id          Int      @id @default(autoincrement())
  amount      Float
  title       String
  description String
  currency    String
  debtorId    Int
  creditorId  Int
  isAccepted  Boolean  @default(false)
  debtor      User     @relation("Debtor", fields: [debtorId], references: [id])
  creditor    User     @relation("Creditor", fields: [creditorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DebtPaymentRequest {
  id         Int      @id @default(autoincrement())
  amount     Float
  debtId     Int
  debtorId   Int
  isAccepted Boolean  @default(false)
  debtor     User     @relation("Debtor", fields: [debtorId], references: [id])
  debt       Debt     @relation(fields: [debtId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
